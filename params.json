{"name":"Twitter Broadcast","tagline":"Node.js + Twitter Streaming API + Websockets = <3","body":"[![NPM version](https://badge.fury.io/js/twtcst.png)](http://badge.fury.io/js/twtcst) [![Dependency Status](https://david-dm.org/serenity/twtcst.png)](https://david-dm.org/serenity/twtcst)\r\n\r\nIt’s a nodejs module provide you easy interface to get the stream of tweets.\r\n\r\n[Article about this in Russian in my blog.](http://simonenko.su/53381781858/pulse-of-web-developments)\r\n\r\n## Installation\r\n\r\n```\r\n$ npm install twtcst\r\n```\r\n\r\n## Examples\r\n\r\n```js\r\nvar twtcst = require(\"twtcst\");\r\n\r\n// array of words you want to track\r\nvar words = [\"javascript\", \"coffeescript\"];\r\n\r\n// object contains your oauth tokens\r\nvar oauth = {\r\n  \"consumer_key\": \"\",\r\n  \"consumer_secret\": \"\",\r\n  \"token\": \"\",\r\n  \"token_secret\": \"\"\r\n};\r\n\r\nvar twitter = twtcst(words, oauth);\r\n\r\nvar validate = twitter.validate();\r\nvar beautify = twitter.beautify();\r\n\r\n// twitter stream api\r\ntwitter.filter(validate, beautify, function(error, tweet) {\r\n  console.log(tweet);\r\n});\r\n```\r\n\r\n## API\r\n\r\n`twtcst` has two parameters. The first is `words` you want to search and the second is your `oauth` tokens.\r\n\r\n```js\r\nvar twitter = twtcst(words, oauth);\r\n```\r\n\r\nThe `twitter` object has two methods: `search` and `filter`.\r\n\r\n**search** implement [Twitter Search API](http://dev.twitter.com/docs/api/1.1/get/search/tweets). It takes a three arguments: validate function, beautify function and a callback. Functions `validate` and `beautify` will be described below. The callback will be caused when all tweets are found. The first argument of callback is error (if it has occured) and the second is array of tweets.\r\n\r\n```js\r\ntwitter.search(validate, beautify, function(error, tweets) {\r\n  if (tweets) {\r\n    tweets.forEach(function(tweet) {\r\n      console.log(tweet);\r\n    });\r\n  }\r\n});\r\n```\r\n\r\n**filter** implement [Twitter Streaming API](http://dev.twitter.com/docs/api/1.1/post/statuses/filter). It has three arguments: `validate`, `beautify` and callback. Filter cause callback and passed new tweet to it every time new tweet appears in Twitter Stream. The filter pass to callback two options: `error` and `tweet`.\r\n\r\n> **Warning**: you can open only one stream per account! If you open the second\r\n> stream, the first stream disconnects.\r\n\r\n```js\r\ntwitter.filter(validate, beautify, function(error, tweet) {\r\n  if (tweet) {\r\n    console.log(tweet);\r\n  }\r\n});\r\n```\r\n\r\n**Format of tweets** depends on the `beautify` function.\r\n\r\n### Words\r\n\r\n`words` is array contains words you want to search. It also can contains hashtags started with hash, e.g.:\r\n\r\n```js\r\nvar words = [\r\n  \"#javascript\",\r\n  \"#coffeescript\"\r\n];\r\n```\r\n\r\n### OAuth tokens\r\n\r\n`oauth` is an object in format required by Twitter API. You can get tokens by [creating new app](http://dev.twitter.com/apps/new) or [from existing app](http://dev.twitter.com/apps).\r\n\r\n```js\r\nvar oauth = {\r\n  \"consumer_key\": \"\",\r\n  \"consumer_secret\": \"\",\r\n  \"token\": \"\",\r\n  \"token_secret\": \"\"\r\n};\r\n```\r\n\r\n### Validate\r\n\r\n**validate** is a function to filter your tweets. Pass it an array of functions you want to filter your tweets.\r\n\r\n```js\r\nvar validate = twitter.validate([\r\n  twitter.allowLangs(['en', 'ru']),\r\n  twitter.blockUsers(['simonenko', 'isquariel']),\r\n  twitter.blockWords(['test', 'word', 'array', '#php']),\r\n  twitter.noRetweets(),\r\n  twitter.noMentions(),\r\n  twitter.noDefaults(),\r\n  twitter.maxHashtags(5),\r\n  yourOwnFilter\r\n]);\r\n```\r\n\r\nIf tweet doesn’t match any of checks you define, it won’t pass on. Each of these functions takes a tweet as an argument and return true if tweet is valid and false otherwise. E.g.:\r\n\r\n```js\r\nvar noRetweets = function() {\r\n  return function(tweet) {\r\n    if (tweet.text.indexOf('RT ') === 0) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n};\r\n```\r\n\r\nAll tweets is in format served by Twitter: [description](https://dev.twitter.com/docs/platform-objects/tweets).\r\n\r\n#### There are some built-in functions to filter\r\n\r\n**blockUsers** filter tweets posted by users you pass to the function. To don’t show tweets from users @simonenko and @isquariel just exec:\r\n\r\n```js\r\nvar validate = twitter.validate([\r\n  twitter.blockUsers(['simonenko', 'isquariel'])\r\n]);\r\n```\r\n\r\n**blockWords** filter tweets that contains specified words. To hide tweets that contains word ruby and hashtag #php write.\r\n\r\n```js\r\nvar validate = twitter.validate([\r\n  twitter.blockWords(['#php', 'ruby'])\r\n]);\r\n```\r\n\r\n**maxHashtags** do not skip tweets that contains more hashtags than you specify.\r\n\r\n```js\r\nvar validate = twitter.validate([\r\n  twitter.maxHashtags(5)\r\n]);\r\n```\r\n\r\n**allowLangs** show tweets written in specified languages only. E.g.:\r\n\r\n```js\r\nvar validate = twitter.validate([\r\n  twitter.allowLangs(['en', 'ru'])\r\n]);\r\n```\r\n\r\n**noRetweets** do not skip old-format retweets (RT @username). To use it exec:\r\n\r\n```js\r\nvar validate = twitter.validate([\r\n  twitter.noRetweets()\r\n]);\r\n```\r\n\r\n**noMentions** do not skip tweets start with @username and .@username. To use it exec:\r\n\r\n```js\r\nvar validate = twitter.validate([\r\n  twitter.noMentions()\r\n]);\r\n```\r\n\r\n**noDefaults** do not skip tweets posted by users with default userpic. To use it exec:\r\n\r\n```js\r\nvar validate = twitter.validate([\r\n  twitter.noDefaults()\r\n]);\r\n```\r\n\r\n### Beautify\r\n\r\n**beautify** is a function to format tweets you get. Pass it an array of functions you want to use for format.\r\n\r\n```js\r\nvar beautify = twitter.beautify([\r\n  twitter.autoLink(false),\r\n  twitter.expandEntities({\r\n    \"urls\": true,\r\n    \"media\": {\r\n      \"width\": 500,\r\n      \"height\": 500,\r\n      \"class\": \"tweet_image\"\r\n    }\r\n  }),\r\n  twitter.humanDate(),\r\n  twitter.twtcstFormat(),\r\n  yourAwesomeFunction\r\n]);\r\n```\r\n\r\nThe first function takes as an argument tweet in tweet format subscribed above. The next functions takes as an argument result of previous function. So you have to write functions in the order you want to work on tweets.\r\n\r\n#### There are some built-in functions for beautify\r\n\r\n**autoLink** modify `tweet.text`. The function automatically wrap links, hashtags and usernames with links. To wrap, use:\r\n\r\n```js\r\nvar beautify = twitter.beautify([\r\n  twitter.autoLinks()\r\n]);\r\n```\r\n\r\nto wrap links only (without usernames and hashtags) use:\r\n\r\n```js\r\nvar beautify = twitter.beautify([\r\n  twitter.autoLinks(false)\r\n]);\r\n```\r\n\r\n**expandEntities** modify `tweet.text`. It will expand links and images.\r\n\r\n```js\r\nvar beautify = twitter.beautify([\r\n  twitter.expandEntities({\r\n    \"urls\": true,\r\n    \"media\": {\r\n      \"width\": 500,\r\n      \"height\": 500,\r\n      \"class\": \"tweet_image\"\r\n    }\r\n  })\r\n]);\r\n```\r\n\r\nset `\"urls\": true` to expand urls if you want to expand them and set `\"media\": { ... }` to expand images. Images will be wrapped in an `a` tag, class of this tag will be class you specified in `media.class`. If you specified `media.width` image width will be set to minimal value of media.width and width of the image. `media.height` property works analogously.\r\n\r\n**humanDate** adds two fields to tweet: `tweet.human_date` and `tweet.iso_date`. Human date is in format *YYYY-MM-DD HH:MM* and ISO date is Date.toISOString().\r\n\r\n```js\r\nvar beautify = twitter.beautify([\r\n  twitter.humanDate()\r\n]);\r\n```\r\n\r\n**twtcstFormat** is a function return tweet converted to format we find convenient for later use:\r\n\r\n```js\r\nvar beautify = twitter.beautify([\r\n  twitter.twtcstFormat()\r\n]);\r\n```\r\n\r\nThe output format is:\r\n\r\n```json\r\n{\r\n  \"id\":     \"Tweet id\",\r\n  \"link\":   \"Link to user page on Twitter\",\r\n  \"avatar\": \"Link to user profile image\",\r\n  \"login\":  \"User login (@username without @)\",\r\n  \"name\":   \"User name or login\",\r\n  \"text\":   \"Improved text of the tweet\",\r\n  \"date\":   \"YYYY-MM-DD HH:MM\",\r\n  \"iso\":    \"Date in ISO\"\r\n}\r\n```\r\n\r\n## Development\r\n\r\nTo get the source form Github execute:\r\n\r\n```\r\n$ git clone git@github.com:serenity/twtcst.git\r\n$ cd twtcst\r\n\r\n$ npm link\r\n$ cake build\r\n```\r\n\r\nThen you should specify your access token in `examples/staff/oauth.js`. Now you have a working example.\r\n\r\nTo try `twtcst.filter` execute\r\n\r\n```\r\n$ node examples/filter.js\r\n```\r\n\r\nThe script puts new tweet to console.\r\n\r\nTo try `twtcst.search` execute\r\n\r\n```\r\n$ node examples/search.js\r\n```\r\n\r\nFirst the scripts puts an array of tweets get from search to console and then it will output tweets from stream.\r\n\r\nFinally, you can view the working html page with stream of tweets. Just execute:\r\n\r\n```\r\n$ node examples/socket.js\r\n```\r\n\r\nand open the examples/index.html in your browser.\r\n\r\n## Authors\r\n\r\n* [Alexey Simonenko](//github.com/meritt), [alexey@simonenko.su](mailto:alexey@simonenko.su), [simonenko.su](http://simonenko.su)\r\n* [Sophia Ilinova](//github.com/isquariel), [tavsophi@gmail.com](mailto:tavsophi@gmail.com)\r\n\r\n## License\r\n\r\nThe MIT License, see the included `License.md` file.","google":"UA-37507032-3","note":"Don't delete this file! It's used internally to help with page regeneration."}